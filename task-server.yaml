openapi: 3.0.3
info:
  title: Task Server API
  description: Task Server API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Local development server
paths:
  /health:
    get:
      summary: Get application health status
      operationId: health.getHealth
      tags:
        - health
      security: []
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
              example:
                status: 'UP'
                timestamp: '2024-01-15T10:30:00Z'
                components:
                  database:
                    status: 'UP'
                    details:
                      connection: 'PostgreSQL'
                      responseTime: '5ms'
        '503':
          description: Application is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
              example:
                status: 'DOWN'
                timestamp: '2024-01-15T10:30:00Z'
                components:
                  database:
                    status: 'DOWN'
                    details:
                      error: 'Connection refused'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal Server Error'
                details: 'Health check service unavailable'
  /tasks:
    get:
      summary: Get all tasks
      operationId: task.getAllTasks
      tags:
        - task
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/task'
              examples:
                existingTasks:
                  summary: Existing tasks
                  value:
                    - id: '12345'
                      title: 'Sample Task 1'
                    - id: '67890'
                      title: 'Sample Task 2'
                emptyTasks:
                  summary: No tasks available
                  value: []

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 401
                message: 'Unauthorized'
                details: 'User ID not found in token'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal server error'
                details: 'database connection failed'
    post:
      summary: Create a new task
      operationId: task.createTask
      tags:
        - task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 400
                message: 'Bad request'
                details: 'title field is required and cannot be empty'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 401
                message: 'Unauthorized'
                details: 'User ID not found in token'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal server error'
                details: 'database connection failed'
  /tasks/{taskId}:
    get:
      summary: Get a task
      operationId: task.getTask
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: The ID of the task to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A task object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 401
                message: 'Unauthorized'
                details: 'User ID not found in token'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 404
                message: 'Task not found'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal server error'
                details: 'database connection failed'
    put:
      summary: Update a task
      operationId: task.updateTask
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: The ID of the task to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 400
                message: 'Bad request'
                details: 'task title cannot exceed 255 characters'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 401
                message: 'Unauthorized'
                details: 'User ID not found in token'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 404
                message: 'Task not found'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal server error'
                details: 'database connection failed'
    delete:
      summary: Delete a task
      operationId: task.deleteTask
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: The ID of the task to delete
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 401
                message: 'Unauthorized'
                details: 'User ID not found in token'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 404
                message: 'Task not found'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                code: 500
                message: 'Internal server error'
                details: 'database connection failed'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    task:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the task
          example: '12345'
        title:
          type: string
          maxLength: 255
          description: The title of the task
          example: 'Sample Task'
      required:
        - id
        - title
    taskCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: The title of the task
          example: 'Sample Task'
      required:
        - title
    taskUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: The title of the task
          example: 'Updated Task'
    healthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Overall application health status
          example: 'UP'
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: '2024-01-15T10:30:00Z'
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/healthComponent'
          description: Health status of individual components
      required:
        - status
        - timestamp
        - components
    healthComponent:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Component health status
          example: 'UP'
        details:
          type: object
          description: Additional component details
          example: 
            connection: 'PostgreSQL'
            responseTime: '5ms'
      required:
        - status
    error:
      type: object
      properties:
        code:
          type: integer
          description: Error code
          example: 400
        message:
          type: string
          description: Error message
          example: 'Bad Request'
        details:
          type: string
          description: Additional error details
          example: 'Invalid input parameters'
      required:
        - code
        - message
